// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: MyProtos.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Teste.Protos {

  /// <summary>Holder for reflection information generated from MyProtos.proto</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public static partial class MyProtosReflection {

    #region Descriptor
    /// <summary>File descriptor for MyProtos.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static MyProtosReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Cg5NeVByb3Rvcy5wcm90bxIMVGVzdGUuUHJvdG9zGhlnb29nbGUvcHJvdG9i",
            "dWYvYW55LnByb3RvIiUKCU15TWVzc2FnZRIKCgJpZBgBIAEoBRIMCgRub21l",
            "GAIgASgJIl8KDE15UnBjUmVxdWVzdBISCgpyZXF1ZXN0X2lkGAEgASgFEhIK",
            "CnNlcnZpY2VfaWQYAiABKAkSEQoJbWV0aG9kX2lkGAMgASgJEhQKDHBheWxv",
            "YWRfZGF0YRgEIAEoDCIiCg1TZWFyY2hSZXF1ZXN0EhEKCWZpbGVfbmFtZRgB",
            "IAEoCSIyCg5TZWFyY2hSZXNwb25zZRINCgVmb3VuZBgBIAEoCBIRCglmaWxl",
            "X3BhdGgYAiABKAliBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Google.Protobuf.WellKnownTypes.AnyReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Teste.Protos.MyMessage), global::Teste.Protos.MyMessage.Parser, new[]{ "Id", "Nome" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Teste.Protos.MyRpcRequest), global::Teste.Protos.MyRpcRequest.Parser, new[]{ "RequestId", "ServiceId", "MethodId", "PayloadData" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Teste.Protos.SearchRequest), global::Teste.Protos.SearchRequest.Parser, new[]{ "FileName" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Teste.Protos.SearchResponse), global::Teste.Protos.SearchResponse.Parser, new[]{ "Found", "FilePath" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class MyMessage : pb::IMessage<MyMessage> {
    private static readonly pb::MessageParser<MyMessage> _parser = new pb::MessageParser<MyMessage>(() => new MyMessage());
    public static pb::MessageParser<MyMessage> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::Teste.Protos.MyProtosReflection.Descriptor.MessageTypes[0]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public MyMessage() {
      OnConstruction();
    }

    partial void OnConstruction();

    public MyMessage(MyMessage other) : this() {
      id_ = other.id_;
      nome_ = other.nome_;
    }

    public MyMessage Clone() {
      return new MyMessage(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private int id_;
    public int Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "nome" field.</summary>
    public const int NomeFieldNumber = 2;
    private string nome_ = "";
    public string Nome {
      get { return nome_; }
      set {
        nome_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    public override bool Equals(object other) {
      return Equals(other as MyMessage);
    }

    public bool Equals(MyMessage other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (Nome != other.Nome) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0) hash ^= Id.GetHashCode();
      if (Nome.Length != 0) hash ^= Nome.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
      if (Nome.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Nome);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
      }
      if (Nome.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Nome);
      }
      return size;
    }

    public void MergeFrom(MyMessage other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      if (other.Nome.Length != 0) {
        Nome = other.Nome;
      }
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
          case 18: {
            Nome = input.ReadString();
            break;
          }
        }
      }
    }

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class MyRpcRequest : pb::IMessage<MyRpcRequest> {
    private static readonly pb::MessageParser<MyRpcRequest> _parser = new pb::MessageParser<MyRpcRequest>(() => new MyRpcRequest());
    public static pb::MessageParser<MyRpcRequest> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::Teste.Protos.MyProtosReflection.Descriptor.MessageTypes[1]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public MyRpcRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    public MyRpcRequest(MyRpcRequest other) : this() {
      requestId_ = other.requestId_;
      serviceId_ = other.serviceId_;
      methodId_ = other.methodId_;
      payloadData_ = other.payloadData_;
    }

    public MyRpcRequest Clone() {
      return new MyRpcRequest(this);
    }

    /// <summary>Field number for the "request_id" field.</summary>
    public const int RequestIdFieldNumber = 1;
    private int requestId_;
    public int RequestId {
      get { return requestId_; }
      set {
        requestId_ = value;
      }
    }

    /// <summary>Field number for the "service_id" field.</summary>
    public const int ServiceIdFieldNumber = 2;
    private string serviceId_ = "";
    public string ServiceId {
      get { return serviceId_; }
      set {
        serviceId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "method_id" field.</summary>
    public const int MethodIdFieldNumber = 3;
    private string methodId_ = "";
    public string MethodId {
      get { return methodId_; }
      set {
        methodId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "payload_data" field.</summary>
    public const int PayloadDataFieldNumber = 4;
    private pb::ByteString payloadData_ = pb::ByteString.Empty;
    public pb::ByteString PayloadData {
      get { return payloadData_; }
      set {
        payloadData_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    public override bool Equals(object other) {
      return Equals(other as MyRpcRequest);
    }

    public bool Equals(MyRpcRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (RequestId != other.RequestId) return false;
      if (ServiceId != other.ServiceId) return false;
      if (MethodId != other.MethodId) return false;
      if (PayloadData != other.PayloadData) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (RequestId != 0) hash ^= RequestId.GetHashCode();
      if (ServiceId.Length != 0) hash ^= ServiceId.GetHashCode();
      if (MethodId.Length != 0) hash ^= MethodId.GetHashCode();
      if (PayloadData.Length != 0) hash ^= PayloadData.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (RequestId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(RequestId);
      }
      if (ServiceId.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(ServiceId);
      }
      if (MethodId.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(MethodId);
      }
      if (PayloadData.Length != 0) {
        output.WriteRawTag(34);
        output.WriteBytes(PayloadData);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RequestId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RequestId);
      }
      if (ServiceId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ServiceId);
      }
      if (MethodId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(MethodId);
      }
      if (PayloadData.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(PayloadData);
      }
      return size;
    }

    public void MergeFrom(MyRpcRequest other) {
      if (other == null) {
        return;
      }
      if (other.RequestId != 0) {
        RequestId = other.RequestId;
      }
      if (other.ServiceId.Length != 0) {
        ServiceId = other.ServiceId;
      }
      if (other.MethodId.Length != 0) {
        MethodId = other.MethodId;
      }
      if (other.PayloadData.Length != 0) {
        PayloadData = other.PayloadData;
      }
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            RequestId = input.ReadInt32();
            break;
          }
          case 18: {
            ServiceId = input.ReadString();
            break;
          }
          case 26: {
            MethodId = input.ReadString();
            break;
          }
          case 34: {
            PayloadData = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class SearchRequest : pb::IMessage<SearchRequest> {
    private static readonly pb::MessageParser<SearchRequest> _parser = new pb::MessageParser<SearchRequest>(() => new SearchRequest());
    public static pb::MessageParser<SearchRequest> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::Teste.Protos.MyProtosReflection.Descriptor.MessageTypes[2]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public SearchRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    public SearchRequest(SearchRequest other) : this() {
      fileName_ = other.fileName_;
    }

    public SearchRequest Clone() {
      return new SearchRequest(this);
    }

    /// <summary>Field number for the "file_name" field.</summary>
    public const int FileNameFieldNumber = 1;
    private string fileName_ = "";
    public string FileName {
      get { return fileName_; }
      set {
        fileName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    public override bool Equals(object other) {
      return Equals(other as SearchRequest);
    }

    public bool Equals(SearchRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (FileName != other.FileName) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (FileName.Length != 0) hash ^= FileName.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (FileName.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(FileName);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (FileName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(FileName);
      }
      return size;
    }

    public void MergeFrom(SearchRequest other) {
      if (other == null) {
        return;
      }
      if (other.FileName.Length != 0) {
        FileName = other.FileName;
      }
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            FileName = input.ReadString();
            break;
          }
        }
      }
    }

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class SearchResponse : pb::IMessage<SearchResponse> {
    private static readonly pb::MessageParser<SearchResponse> _parser = new pb::MessageParser<SearchResponse>(() => new SearchResponse());
    public static pb::MessageParser<SearchResponse> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::Teste.Protos.MyProtosReflection.Descriptor.MessageTypes[3]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public SearchResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    public SearchResponse(SearchResponse other) : this() {
      found_ = other.found_;
      filePath_ = other.filePath_;
    }

    public SearchResponse Clone() {
      return new SearchResponse(this);
    }

    /// <summary>Field number for the "found" field.</summary>
    public const int FoundFieldNumber = 1;
    private bool found_;
    public bool Found {
      get { return found_; }
      set {
        found_ = value;
      }
    }

    /// <summary>Field number for the "file_path" field.</summary>
    public const int FilePathFieldNumber = 2;
    private string filePath_ = "";
    public string FilePath {
      get { return filePath_; }
      set {
        filePath_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    public override bool Equals(object other) {
      return Equals(other as SearchResponse);
    }

    public bool Equals(SearchResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Found != other.Found) return false;
      if (FilePath != other.FilePath) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (Found != false) hash ^= Found.GetHashCode();
      if (FilePath.Length != 0) hash ^= FilePath.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (Found != false) {
        output.WriteRawTag(8);
        output.WriteBool(Found);
      }
      if (FilePath.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(FilePath);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (Found != false) {
        size += 1 + 1;
      }
      if (FilePath.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(FilePath);
      }
      return size;
    }

    public void MergeFrom(SearchResponse other) {
      if (other == null) {
        return;
      }
      if (other.Found != false) {
        Found = other.Found;
      }
      if (other.FilePath.Length != 0) {
        FilePath = other.FilePath;
      }
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Found = input.ReadBool();
            break;
          }
          case 18: {
            FilePath = input.ReadString();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
