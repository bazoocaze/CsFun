// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: MyProtos.proto
#region Designer generated code

using System;
using System.Threading;
using System.Threading.Tasks;
using Grpc.Core;

namespace Teste.Protos {
  public static class SearchService
  {
    static readonly string __ServiceName = "Teste.Protos.SearchService";

    static readonly Marshaller<global::Teste.Protos.SearchRequest> __Marshaller_SearchRequest = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Teste.Protos.SearchRequest.Parser.ParseFrom);
    static readonly Marshaller<global::Teste.Protos.SearchResponse> __Marshaller_SearchResponse = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Teste.Protos.SearchResponse.Parser.ParseFrom);

    static readonly Method<global::Teste.Protos.SearchRequest, global::Teste.Protos.SearchResponse> __Method_Search = new Method<global::Teste.Protos.SearchRequest, global::Teste.Protos.SearchResponse>(
        MethodType.Unary,
        __ServiceName,
        "Search",
        __Marshaller_SearchRequest,
        __Marshaller_SearchResponse);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Teste.Protos.MyProtosReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of SearchService</summary>
    public abstract class SearchServiceBase
    {
      public virtual global::System.Threading.Tasks.Task<global::Teste.Protos.SearchResponse> Search(global::Teste.Protos.SearchRequest request, ServerCallContext context)
      {
        throw new RpcException(new Status(StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for SearchService</summary>
    public class SearchServiceClient : ClientBase<SearchServiceClient>
    {
      /// <summary>Creates a new client for SearchService</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public SearchServiceClient(Channel channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for SearchService that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public SearchServiceClient(CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected SearchServiceClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected SearchServiceClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      public virtual global::Teste.Protos.SearchResponse Search(global::Teste.Protos.SearchRequest request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return Search(request, new CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Teste.Protos.SearchResponse Search(global::Teste.Protos.SearchRequest request, CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Search, null, options, request);
      }
      public virtual AsyncUnaryCall<global::Teste.Protos.SearchResponse> SearchAsync(global::Teste.Protos.SearchRequest request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return SearchAsync(request, new CallOptions(headers, deadline, cancellationToken));
      }
      public virtual AsyncUnaryCall<global::Teste.Protos.SearchResponse> SearchAsync(global::Teste.Protos.SearchRequest request, CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Search, null, options, request);
      }
      protected override SearchServiceClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new SearchServiceClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    public static ServerServiceDefinition BindService(SearchServiceBase serviceImpl)
    {
      return ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_Search, serviceImpl.Search).Build();
    }

  }
}
#endregion
