/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

public partial class SearchService {
  public interface Iface {
    SearchResult Search(SearchRequest request);
    #if SILVERLIGHT
    IAsyncResult Begin_Search(AsyncCallback callback, object state, SearchRequest request);
    SearchResult End_Search(IAsyncResult asyncResult);
    #endif
    void Delay1(int millis);
    #if SILVERLIGHT
    IAsyncResult Begin_Delay1(AsyncCallback callback, object state, int millis);
    void End_Delay1(IAsyncResult asyncResult);
    #endif
    void Delay2(int millis);
    #if SILVERLIGHT
    IAsyncResult Begin_Delay2(AsyncCallback callback, object state, int millis);
    void End_Delay2(IAsyncResult asyncResult);
    #endif
  }

  public class Client : IDisposable, Iface {
    public Client(TProtocol prot) : this(prot, prot)
    {
    }

    public Client(TProtocol iprot, TProtocol oprot)
    {
      iprot_ = iprot;
      oprot_ = oprot;
    }

    protected TProtocol iprot_;
    protected TProtocol oprot_;
    protected int seqid_;

    public TProtocol InputProtocol
    {
      get { return iprot_; }
    }
    public TProtocol OutputProtocol
    {
      get { return oprot_; }
    }


    #region " IDisposable Support "
    private bool _IsDisposed;

    // IDisposable
    public void Dispose()
    {
      Dispose(true);
    }
    

    protected virtual void Dispose(bool disposing)
    {
      if (!_IsDisposed)
      {
        if (disposing)
        {
          if (iprot_ != null)
          {
            ((IDisposable)iprot_).Dispose();
          }
          if (oprot_ != null)
          {
            ((IDisposable)oprot_).Dispose();
          }
        }
      }
      _IsDisposed = true;
    }
    #endregion


    
    #if SILVERLIGHT
    public IAsyncResult Begin_Search(AsyncCallback callback, object state, SearchRequest request)
    {
      return send_Search(callback, state, request);
    }

    public SearchResult End_Search(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_Search();
    }

    #endif

    public SearchResult Search(SearchRequest request)
    {
      #if !SILVERLIGHT
      send_Search(request);
      return recv_Search();

      #else
      var asyncResult = Begin_Search(null, null, request);
      return End_Search(asyncResult);

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_Search(AsyncCallback callback, object state, SearchRequest request)
    #else
    public void send_Search(SearchRequest request)
    #endif
    {
      oprot_.WriteMessageBegin(new TMessage("Search", TMessageType.Call, seqid_));
      Search_args args = new Search_args();
      args.Request = request;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      #if SILVERLIGHT
      return oprot_.Transport.BeginFlush(callback, state);
      #else
      oprot_.Transport.Flush();
      #endif
    }

    public SearchResult recv_Search()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      Search_result result = new Search_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      if (result.__isset.ex) {
        throw result.Ex;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "Search failed: unknown result");
    }

    
    #if SILVERLIGHT
    public IAsyncResult Begin_Delay1(AsyncCallback callback, object state, int millis)
    {
      return send_Delay1(callback, state, millis);
    }

    public void End_Delay1(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      recv_Delay1();
    }

    #endif

    public void Delay1(int millis)
    {
      #if !SILVERLIGHT
      send_Delay1(millis);
      recv_Delay1();

      #else
      var asyncResult = Begin_Delay1(null, null, millis);
      End_Delay1(asyncResult);

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_Delay1(AsyncCallback callback, object state, int millis)
    #else
    public void send_Delay1(int millis)
    #endif
    {
      oprot_.WriteMessageBegin(new TMessage("Delay1", TMessageType.Call, seqid_));
      Delay1_args args = new Delay1_args();
      args.Millis = millis;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      #if SILVERLIGHT
      return oprot_.Transport.BeginFlush(callback, state);
      #else
      oprot_.Transport.Flush();
      #endif
    }

    public void recv_Delay1()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      Delay1_result result = new Delay1_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      return;
    }

    
    #if SILVERLIGHT
    public IAsyncResult Begin_Delay2(AsyncCallback callback, object state, int millis)
    {
      return send_Delay2(callback, state, millis);
    }

    public void End_Delay2(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      recv_Delay2();
    }

    #endif

    public void Delay2(int millis)
    {
      #if !SILVERLIGHT
      send_Delay2(millis);
      recv_Delay2();

      #else
      var asyncResult = Begin_Delay2(null, null, millis);
      End_Delay2(asyncResult);

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_Delay2(AsyncCallback callback, object state, int millis)
    #else
    public void send_Delay2(int millis)
    #endif
    {
      oprot_.WriteMessageBegin(new TMessage("Delay2", TMessageType.Call, seqid_));
      Delay2_args args = new Delay2_args();
      args.Millis = millis;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      #if SILVERLIGHT
      return oprot_.Transport.BeginFlush(callback, state);
      #else
      oprot_.Transport.Flush();
      #endif
    }

    public void recv_Delay2()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      Delay2_result result = new Delay2_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      return;
    }

  }
  public class Processor : TProcessor {
    public Processor(Iface iface)
    {
      iface_ = iface;
      processMap_["Search"] = Search_Process;
      processMap_["Delay1"] = Delay1_Process;
      processMap_["Delay2"] = Delay2_Process;
    }

    protected delegate void ProcessFunction(int seqid, TProtocol iprot, TProtocol oprot);
    private Iface iface_;
    protected Dictionary<string, ProcessFunction> processMap_ = new Dictionary<string, ProcessFunction>();

    public bool Process(TProtocol iprot, TProtocol oprot)
    {
      try
      {
        TMessage msg = iprot.ReadMessageBegin();
        ProcessFunction fn;
        processMap_.TryGetValue(msg.Name, out fn);
        if (fn == null) {
          TProtocolUtil.Skip(iprot, TType.Struct);
          iprot.ReadMessageEnd();
          TApplicationException x = new TApplicationException (TApplicationException.ExceptionType.UnknownMethod, "Invalid method name: '" + msg.Name + "'");
          oprot.WriteMessageBegin(new TMessage(msg.Name, TMessageType.Exception, msg.SeqID));
          x.Write(oprot);
          oprot.WriteMessageEnd();
          oprot.Transport.Flush();
          return true;
        }
        fn(msg.SeqID, iprot, oprot);
      }
      catch (IOException)
      {
        return false;
      }
      return true;
    }

    public void Search_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      Search_args args = new Search_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      Search_result result = new Search_result();
      try {
        result.Success = iface_.Search(args.Request);
      } catch (InvalidOperation ex) {
        result.Ex = ex;
      }
      oprot.WriteMessageBegin(new TMessage("Search", TMessageType.Reply, seqid)); 
      result.Write(oprot);
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void Delay1_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      Delay1_args args = new Delay1_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      Delay1_result result = new Delay1_result();
      iface_.Delay1(args.Millis);
      oprot.WriteMessageBegin(new TMessage("Delay1", TMessageType.Reply, seqid)); 
      result.Write(oprot);
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void Delay2_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      Delay2_args args = new Delay2_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      Delay2_result result = new Delay2_result();
      iface_.Delay2(args.Millis);
      oprot.WriteMessageBegin(new TMessage("Delay2", TMessageType.Reply, seqid)); 
      result.Write(oprot);
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class Search_args : TBase
  {
    private SearchRequest _request;

    public SearchRequest Request
    {
      get
      {
        return _request;
      }
      set
      {
        __isset.request = true;
        this._request = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool request;
    }

    public Search_args() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.Struct) {
              Request = new SearchRequest();
              Request.Read(iprot);
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("Search_args");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (Request != null && __isset.request) {
        field.Name = "request";
        field.Type = TType.Struct;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        Request.Write(oprot);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("Search_args(");
      sb.Append("Request: ");
      sb.Append(Request== null ? "<null>" : Request.ToString());
      sb.Append(")");
      return sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class Search_result : TBase
  {
    private SearchResult _success;
    private InvalidOperation _ex;

    public SearchResult Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }

    public InvalidOperation Ex
    {
      get
      {
        return _ex;
      }
      set
      {
        __isset.ex = true;
        this._ex = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
      public bool ex;
    }

    public Search_result() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 0:
            if (field.Type == TType.Struct) {
              Success = new SearchResult();
              Success.Read(iprot);
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 1:
            if (field.Type == TType.Struct) {
              Ex = new InvalidOperation();
              Ex.Read(iprot);
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("Search_result");
      oprot.WriteStructBegin(struc);
      TField field = new TField();

      if (this.__isset.success) {
        if (Success != null) {
          field.Name = "Success";
          field.Type = TType.Struct;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          Success.Write(oprot);
          oprot.WriteFieldEnd();
        }
      } else if (this.__isset.ex) {
        if (Ex != null) {
          field.Name = "Ex";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          Ex.Write(oprot);
          oprot.WriteFieldEnd();
        }
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("Search_result(");
      sb.Append("Success: ");
      sb.Append(Success== null ? "<null>" : Success.ToString());
      sb.Append(",Ex: ");
      sb.Append(Ex== null ? "<null>" : Ex.ToString());
      sb.Append(")");
      return sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class Delay1_args : TBase
  {
    private int _millis;

    public int Millis
    {
      get
      {
        return _millis;
      }
      set
      {
        __isset.millis = true;
        this._millis = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool millis;
    }

    public Delay1_args() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case -1:
            if (field.Type == TType.I32) {
              Millis = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("Delay1_args");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (__isset.millis) {
        field.Name = "millis";
        field.Type = TType.I32;
        field.ID = -1;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(Millis);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("Delay1_args(");
      sb.Append("Millis: ");
      sb.Append(Millis);
      sb.Append(")");
      return sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class Delay1_result : TBase
  {

    public Delay1_result() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("Delay1_result");
      oprot.WriteStructBegin(struc);

      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("Delay1_result(");
      sb.Append(")");
      return sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class Delay2_args : TBase
  {
    private int _millis;

    public int Millis
    {
      get
      {
        return _millis;
      }
      set
      {
        __isset.millis = true;
        this._millis = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool millis;
    }

    public Delay2_args() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case -1:
            if (field.Type == TType.I32) {
              Millis = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("Delay2_args");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (__isset.millis) {
        field.Name = "millis";
        field.Type = TType.I32;
        field.ID = -1;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(Millis);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("Delay2_args(");
      sb.Append("Millis: ");
      sb.Append(Millis);
      sb.Append(")");
      return sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class Delay2_result : TBase
  {

    public Delay2_result() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("Delay2_result");
      oprot.WriteStructBegin(struc);

      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("Delay2_result(");
      sb.Append(")");
      return sb.ToString();
    }

  }

}
